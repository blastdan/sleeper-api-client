/**
 * Sleeper API
 * The Sleeper API is a read-only HTTP API that is free to use and allows             access to a users leagues, drafts, and rosters. No API Token is necessary, as you cannot modify contents via this API. Be mindful of the frequency of calls. A general rule is to stay under 1000 API calls per minute, otherwise, you risk being IP-blocked.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { HttpHeaders }                                       from '@angular/common/http';

import { Observable }                                        from 'rxjs';

import { League } from '../model/models';
import { Matchup } from '../model/models';
import { Roster } from '../model/models';
import { SportState } from '../model/models';
import { TradedPick } from '../model/models';
import { UserInLeague } from '../model/models';


import { Configuration }                                     from '../configuration';



export interface LeaguesServiceInterface {
    defaultHeaders: HttpHeaders;
    configuration: Configuration;

    /**
     * Get a specific league
     * This endpoint retrieves all leagues.
     * @param leagueId the league to get
     */
    leagueLeagueIdGet(leagueId: string, extraHttpRequestParams?: any): Observable<League>;

    /**
     * Getting the loosers playoff bracket
     * This endpoint retrieves the playoff bracket for a league for 4, 6, and 8 team playoffs. Each row represents a matchup between 2 teams.
     * @param leagueId The ID of the league to retrieve matchups from
     */
    leagueLeagueIdLosesBracketGet(leagueId: string, extraHttpRequestParams?: any): Observable<Array<object>>;

    /**
     * Getting matchups in a league
     * This endpoint retrieves all matchups in a league for a given week. Each object in the list represents one team. The two teams with the same matchup_id match up against each other. The starters is in an ordered list of player_ids, and players is a list of all player_ids in this matchup. The bench can be deduced by removing the starters from the players field.
     * @param leagueId The ID of the league to retrieve matchups from
     * @param week The week these matchups take place
     */
    leagueLeagueIdMatchupsWeekGet(leagueId: string, week: number, extraHttpRequestParams?: any): Observable<Array<Matchup>>;

    /**
     * Getting rosters in a league
     * This endpoint retrieves all rosters in a league.
     * @param leagueId the league to get
     */
    leagueLeagueIdRostersGet(leagueId: string, extraHttpRequestParams?: any): Observable<Array<Roster>>;

    /**
     * Get traded picks
     * This endpoint retrieves all traded picks in a league, including future picks.
     * @param leagueId The ID of the league to retrieve matchups from
     */
    leagueLeagueIdTradedPicksGet(leagueId: string, extraHttpRequestParams?: any): Observable<Array<TradedPick>>;

    /**
     * Get Transactions
     * This endpoint retrieves the playoff bracket for a league for 4, 6, and 8 team playoffs. Each row represents a matchup between 2 teams.
     * @param leagueId The ID of the league to retrieve matchups from
     * @param round The week you want to pull from
     */
    leagueLeagueIdTransactionsRoundGet(leagueId: string, round: number, extraHttpRequestParams?: any): Observable<Array<object>>;

    /**
     * Getting users in a league
     * This endpoint retrieves all users in a league. This also includes each users display_name, avatar, and their metadata which sometimes includes a nickname they gave their team.
     * @param leagueId the league to get
     */
    leagueLeagueIdUsersGet(leagueId: string, extraHttpRequestParams?: any): Observable<Array<UserInLeague>>;

    /**
     * Getting the winners playoff bracket
     * This endpoint retrieves the playoff bracket for a league for 4, 6, and 8 team playoffs. Each row represents a matchup between 2 teams.
     * @param leagueId The ID of the league to retrieve matchups from
     */
    leagueLeagueIdWinnersBracketGet(leagueId: string, extraHttpRequestParams?: any): Observable<Array<object>>;

    /**
     * Get NFL State
     * This endpoint retrieves all traded picks in a league, including future picks.
     * @param sport nfl, nba, lcs, etc
     */
    stateSportGet(sport: 'nfl' | 'nba' | 'lcs', extraHttpRequestParams?: any): Observable<SportState>;

    /**
     * This endpoint retrieves all leagues.
     * 
     * @param userId the user is to get
     * @param sport Only \&quot;nfl\&quot; is supported right now
     * @param season The NFL season to get
     */
    userUserIdLeaguesSportSeasonGet(userId: string, sport: string, season: number, extraHttpRequestParams?: any): Observable<Array<League>>;

}
